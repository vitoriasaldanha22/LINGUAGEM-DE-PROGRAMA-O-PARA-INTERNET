const express = require("express");
const mysql = require("mysql2/promise");

const app = express();
const PORT = 3001;

// Configura√ß√£o do MySQL (igual ao docker-compose)
const dbConfig = {
  host: "mysql",       // nome do servi√ßo no docker-compose
  user: "appuser",
  password: "apppass",
  database: "appdb"
};

app.get("/", (req, res) => {

  //res.json({ message: "Node.js est√° rodando no Docker!" });
  const htmlstring = `

 <!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>Documenta√ß√£o da API ‚Äî Vit√≥ria Saldanha</title>
</head>
<body>

  <header>
    <h1>Documenta√ß√£o da API</h1>
    <p><strong>Vit√≥ria Saldanha</strong> ‚Äî Curso: Sistemas de Informa√ß√£o (5¬∫ per√≠odo) ‚Äî 21 anos</p>
  </header>

  <nav>
    <a href="#overview">Vis√£o Geral</a>
    <a href="#endpoints">Endpoints</a>
    <a href="#exemplos">Exemplos</a>
    <a href="#contato">Contato</a>
  </nav>

  <section id="overview">
    <h2>Vis√£o Geral</h2>
    <p>Esta documenta√ß√£o descreve os recursos e como interagir com a API.</p>
    <p>Base URL: <code>https://api.seuservidor.com/v1</code></p>
    <p>Autentica√ß√£o: Adicione um token no cabe√ßalho <code>Authorization: Bearer &lt;SEU_TOKEN&gt;</code>.</p>
  </section>

  <section id="endpoints">
    <h2>Endpoints</h2>

    <h3>GET /users</h3>
    <p>Retorna a lista de usu√°rios.</p>
    <p><strong>Resposta (200 OK)</strong>:</p>
    <pre>[
  {
    "id": 1,
    "nome": "Jo√£o Silva",
    "email": "joao.silva@example.com",
    "telefone": "11999999999",
    "criado_em": "2025-09-01T22:46:35.000Z"
  },
  ...
]</pre>

    <h3>GET /users/{id}</h3>
    <p>Retorna um usu√°rio pelo ID.</p>
    <p><strong>Par√¢metro:</strong> <code>id</code> (inteiro) ‚Äî obrigat√≥rio.</p>
    <p><strong>Resposta (200 OK)</strong>:</p>
    <pre>{
  "id": 1,
  "nome": "Jo√£o Silva",
  "email": "joao.silva@example.com",
  "telefone": "11999999999",
  "criado_em": "2025-09-01T22:46:35.000Z"
}</pre>
    <p><strong>Resposta (404 Not Found)</strong>:</p>
    <pre>{
  "error": "Usu√°rio n√£o encontrado"
}</pre>
  </section>

  <section id="exemplos">
    <h2>Exemplos de Uso</h2>
    <h3>Chamada com curl</h3>
    <pre>curl -X GET "https://api.seuservidor.com/v1/users" \
  -H "Authorization: Bearer SEU_TOKEN"</pre>

    <h3>Resposta esperada</h3>
    <pre>[
  {
    "id": 1,
    "nome": "Jo√£o Silva",
    "email": "joao.silva@example.com",
    "telefone": "11999999999",
    "criado_em": "2025-09-01T22:46:35.000Z"
  },
  ...
]</pre>
  </section>

  <section id="contato">
    <h2>Contato</h2>
    <p>Documenta√ß√£o criada por <strong>Vit√≥ria Saldanha</strong>.</p>
    <p>Curso: Sistemas de Informa√ß√£o ‚Äî 5¬∫ per√≠odo</p>
    <p>Idade: 21 anos</p>
  </section>

  <footer>
    <p>¬© 2025 Vit√≥ria Saldanha ‚Äî Documenta√ß√£o gerada em HTML.</p>
  </footer>

</body>
</html>

  `;

  res.send(htmlstring);
});
app.get("/api/v1/cliente", async (req, res) => {

 



  try {
    const connection = await mysql.createConnection(dbConfig);
    const [rows] = await connection.execute("SELECT * FROM clientes");
    await connection.end();
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.listen(PORT, () => {
  console.log(`üöÄ Servidor Node rodando na porta ${PORT}`);
});
